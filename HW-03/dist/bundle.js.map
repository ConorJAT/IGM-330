{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://hw-03/./src/canvas.ts","webpack://hw-03/./src/audio.ts","webpack://hw-03/./src/utils.ts","webpack://hw-03/./src/main.ts","webpack://hw-03/./src/loader.ts"],"sourcesContent":["// The purpose of this file is to take in the analyser node and a <canvas> element: \r\n//   - The module will create a drawing context that points at the <canvas> \r\n//   - It will store the reference to the analyser node\r\n//   - In draw(), it will loop through the data in the analyser node\r\n//   - And then draw something representative on the canvas\r\n\r\n// Import from local ts file.\r\nimport * as utils from './utils';\r\n\r\nlet ctx,canvasWidth,canvasHeight,gradient,analyserNode,audioData;\r\nlet rotation;\r\nlet canvasSprites = []; \r\n\r\n// Declare DrawParams interface to dictate what gets shown or not.\r\nlet drawParams : utils.DrawParams = {visualData: \"frequency\", showGradient: true, showPlanets: true, showCircles: true, showNoise: false};\r\n\r\n\r\n// Set up the canvas for visualization.\r\nconst setupCanvas = (canvasElement,analyserNodeRef) => {\r\n\t// 1.) - Create drawing context.\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\r\n\t// 2.) - Create default gradient that runs top to bottom.\r\n\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#00101c\"},{percent:.33,color:\"#041f3a\"},{percent:.67,color:\"#083f53\"},{percent:1,color:\"#239294\"}]);\r\n\r\n\t// 3.) - Store a reference to the analyser node.\r\n\tanalyserNode = analyserNodeRef;\r\n\r\n\t// 4.) - Set up array where the analyser data will be stored.\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n\r\n\t// 5.) - Set up visualizer sprites and rotation value.\r\n\tcanvasSprites = [new utils.Planet({xPos: 540, yPos: 620, radius: 184, barWidth: 5, barMaxHeight: 100, barPadding: 4, fillColor: \"rgba(14, 111, 128, .9)\"}), \r\n\t\t\t\t\t new utils.Planet({xPos: 880, yPos: 300, radius: 120, barWidth: 2.9, barMaxHeight: 60, barPadding: 3, fillColor: \"rgba(27, 45, 112, .9)\"}), \r\n\t\t\t\t\t new utils.Planet({xPos: 200, yPos: 180, radius: 50, barWidth: 1.4, barMaxHeight: 40, barPadding: 1, fillColor: \"rgba(6, 37, 87, .9)\"})];\r\n\trotation = 0;\r\n}\r\n\r\n\r\n// Draw elements to the canvas.\r\nconst draw = () => {\r\n  \t// 1.) - Populate the audioData array with the frequency (or time domain) data from the analyserNode.\r\n\tif (drawParams.visualData == \"frequency\") analyserNode.getByteFrequencyData(audioData);\r\n\telse if (drawParams.visualData == \"time-domain\") analyserNode.getByteTimeDomainData(audioData);\r\n\t\r\n\t// 2.) - Draw the background.\r\n\tctx.save();\r\n\tctx.fillStyle = \"black\";\r\n\tctx.globalAlpha = .1;\r\n\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\tctx.restore();\r\n\t\t\r\n\t// 3.) - Draw the gradient.\r\n\tif(drawParams.showGradient){\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = gradient;\r\n\t\tctx.globalAlpha = .3;\r\n\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 4.) - Draw center beat circles.\r\n\tif(drawParams.showCircles){\r\n\t\tlet maxRadius = canvasHeight/4;\r\n\t\tctx.save();\r\n\t\tctx.globalAlpha = .5;\r\n\t\tfor (let i = 0; i<audioData.length; i++) {\r\n\t\t\tlet percent = audioData[i] / 255;\r\n\r\n\t\t\tlet circleRadius = percent * maxRadius;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(210, 210, 210, .34 - percent/3.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(180, 180, 180, .1 - percent/10.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.save();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(240, 240, 240, .5 - percent/5.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * .5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 5.) - Draw visual noise via bitmap manipulation.\r\n\t// 5A.) - Grab all of the pixels on the canvas and put them in the `data` array.\r\n\tlet imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n\tlet data = imageData.data;\r\n\tlet length = data.length;\r\n\tlet width = imageData.width;\r\n\r\n\t// 5B.) - Iterate through each pixel, stepping 4 elements at a time.\r\n\tfor (let i = 0; i < length; i += 4){ \r\n\r\n\t\t// 5C.) - Randomly change every 20th pixel to white.\r\n\t\tif (drawParams.showNoise && Math.random() < .05){\t\t\r\n\t\t\tdata[i] = data[i+1] = data[i+2] = 0;\r\n\t\t\tdata[i] = 255;\r\n\t\t\tdata[i+1] = 255;\r\n\t\t\tdata[i+2] = 255;\r\n\t\t}\r\n\t}\r\n\r\n\t// 5D.) - Copy image data back to canvas.\r\n\tctx.putImageData(imageData, 0, 0);\r\n\r\n\t// 6.) - Draw the sprites and alter rotation value.\r\n\tif (drawParams.showPlanets) for (let s of canvasSprites) s.draw();\r\n\trotation -= 0.01;\r\n}\r\n\r\n\r\n// Draws beat bars that encircle and rotate for the sprites.\r\nconst drawCircularBars = (xStart, yStart, radialOffset, barWidth, maxBarHeight, barPadding, fillColor) => {\r\n\tctx.fillStyle = fillColor;\r\n\tctx.strokeStyle = \"black\";\r\n\tctx.save();\r\n\t\r\n\tctx.translate(xStart, yStart);\r\n\tctx.rotate(rotation);\r\n\tctx.translate(0, -radialOffset)\r\n\r\n\tfor (let d of audioData){\r\n\t\tlet percent = d/255;\r\n\t\tif (percent < 0.02) percent = .02;\r\n\r\n\t\tctx.translate(barWidth, 0);\r\n\t\tctx.rotate((Math.PI * 2) / 128);\r\n\t\t\r\n\t\tctx.save();\r\n\t\tctx.scale(1, -1);\r\n\t\tctx.fillRect(0, 0, barWidth, maxBarHeight * percent);\r\n\t\tctx.restore();\r\n\r\n\t\tctx.translate(barPadding, 0);\r\n\t}\r\n\r\n\tctx.restore();\r\n};\r\n\r\n\r\n// Changes the visual theme (gradient and sprites).\r\nconst changeTheme = (value) => {\r\n\tif (value != \"none\") drawParams.showGradient = true;\r\n\t\r\n\t// Set to evening theme colors.\r\n\tif (value == \"evening\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#00101c\"},{percent:.33,color:\"#041f3a\"},{percent:.67,color:\"#083f53\"},{percent:1,color:\"#239294\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(14, 111, 128, .9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(27, 45, 112, .9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(6, 37, 87, .9)\");\r\n\t}\r\n\t\r\n\t// Set to midnight theme colors.\r\n\telse if (value == \"midnight\"){\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#070707\"},{percent:.5,color:\"#1D1D25\"},{percent:1,color:\"#263242\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(48, 68, 92, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(42, 42, 56, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(35, 35, 43, 0.9)\");\r\n\t} \r\n\r\n\t// Set to morning theme colors.\r\n\telse if (value == \"morning\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#0087A5\"},{percent:.33,color:\"#7FACB2\"},{percent:.67,color:\"#D4C6AB\"},{percent:1,color:\"#FAAD51\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(245, 186, 118, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(165, 204, 207, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(15, 141, 166, 0.9)\");\r\n\t}\r\n\r\n\t// Set to afternoon theme colors.\r\n\telse if (value == \"afternoon\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#3B589E\"},{percent:.33,color:\"#6A719F\"},{percent:.67,color:\"#B28393\"},{percent:1,color:\"#EC5065\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(245, 144, 145, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(172, 156, 184, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(95, 122, 194, 0.9)\");\r\n\t}\r\n\r\n\t// Deactivate gradient and set sprites to white.\r\n\telse if (value == \"none\") {\r\n\t\tdrawParams.showGradient = false;\r\n\t\tcanvasSprites[0].changeFillColor(\"white\");\r\n\t\tcanvasSprites[1].changeFillColor(\"white\");\r\n\t\tcanvasSprites[2].changeFillColor(\"white\");\r\n\t}\t\r\n}\r\n\r\nexport {setupCanvas,draw,changeTheme,drawParams,ctx,rotation,drawCircularBars};","// 1.) - Declare WebAudio context.\r\nlet audioCtx;\r\n\r\n// 2.) - WebAudio nodes that make up the WebAudio audio routing graph.\r\nlet element, sourceNode, analyserNode, gainNode;\r\nlet highShelfbiquadFilter, lowShelfBiquadFilter;\r\n\r\n// 3.) - Create default values.\r\nconst DEFAULTS = Object.freeze({\r\n    gain        :   .5,\r\n    numSamples  :   256\r\n});\r\n\r\n// 4.) - Create a new array of 8-bit integers (0-255).\r\n// This is a typed array to hold the audio frequency data.\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples/2);\r\n\r\n// Sets up web audio for the visualizer.\r\nconst setupWebAudio = (filepath) => {\r\n    // 1.) - Initialize WebAudio context.\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2.) - Create an <audio> element.\r\n    element = new Audio();\r\n\r\n    // 3.) - Point the <audio> element at a sound file.\r\n    loadSoundFile(filepath);\r\n\r\n    // 4.) - Create source node that points at the <audio> element.\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5.) - Create analyser node.\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    // 6.) - Apply fft (Fast Fourier Transform) to the analyser node.\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7.) - Create high shelf biquad (treble) filter.\r\n    highShelfbiquadFilter = audioCtx.createBiquadFilter();\r\n    highShelfbiquadFilter.type = \"highshelf\";\r\n    highShelfbiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // 8.) - Create low shelf biquad (bass) filter.\r\n\tlowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilter.type = \"lowshelf\";\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // 9.) - Create gain (volume) node.\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 10.) - Connect the nodes and create the audio graph.\r\n    sourceNode.connect(highShelfbiquadFilter);\r\n    highShelfbiquadFilter.connect(lowShelfBiquadFilter);\r\n    lowShelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n};\r\n\r\n// Load in audio file via the filePath.\r\nconst loadSoundFile = (filePath) => { element.src = filePath; };\r\n\r\n// Play the current audio.\r\nconst playCurrentSound = () => { element.play(); };\r\n\r\n// Pause the current audio.\r\nconst pauseCurrentSound = () => { element.pause(); };\r\n\r\n// Set the volume based on slider input.\r\nconst setVolume = (value) => {\r\n    value = Number(value);\r\n    gainNode.gain.value = value;\r\n};\r\n\r\n// Set the treble based on slider input.\r\nconst setHighshelf = (value) => {\r\n    highShelfbiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    highShelfbiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\n// Set the bass based on slider input.\r\nconst setLowshelf = (value) => {\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    lowShelfBiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nexport {audioCtx, setupWebAudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, setHighshelf, setLowshelf, analyserNode};","import {ctx, rotation, drawCircularBars} from './canvas';\r\n\r\ninterface DrawParams{\r\n\tvisualData    : string,\r\n\tshowGradient  : boolean,\r\n\tshowPlanets   : boolean,\r\n\tshowCircles   : boolean,\r\n\tshowNoise     : boolean\r\n}\r\n\r\nconst Planet = class{\r\n\txPos: number;\r\n\tyPos: number;\r\n\tradius: number;\r\n\tbarWidth: number;\r\n\tbarMaxHeight: number;\r\n\tbarPadding: number;\r\n\tfillColor: string;\r\n\r\n\tconstructor({xPos, yPos, radius, barWidth, barMaxHeight, barPadding, fillColor}){\r\n\t\tObject.assign(this, {xPos, yPos, radius, barWidth, barMaxHeight, barPadding, fillColor});\r\n\t}\r\n\r\n\tdraw(){\r\n\t\tctx.fillStyle = this.fillColor;\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.save();\r\n\t\tctx.translate(this.xPos, this.yPos);\r\n\t\tctx.rotate(rotation);\r\n\t\tctx.beginPath();\r\n\t\tctx.arc(0, 0, this.radius, 0, Math.PI * 2);\r\n\t\tctx.fill();\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t\tctx.restore();\r\n\r\n\t\tdrawCircularBars(this.xPos, this.yPos, this.radius, this.barWidth, this.barMaxHeight, this.barPadding, \"white\");\r\n\t}\r\n\r\n\tchangeFillColor(value){\r\n\t\tthis.fillColor = value;\r\n\t}\r\n};\r\n\r\nconst makeColor = (red, green, blue, alpha = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min, max) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n  \r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor,255-floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n  \r\nconst getLinearGradient = (ctx,startX,startY,endX,endY,colorStops) => {\r\n  let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n  for(let stop of colorStops){\r\n    lg.addColorStop(stop.percent,stop.color);\r\n  }\r\n  return lg;\r\n};\r\n  \r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element:HTMLElement) => { element.requestFullscreen(); };\r\n  \r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen, DrawParams, Planet};","// main.ts - Primarily responsible for hooking up the UI to the rest of the application \r\n// and setting up the main event loop\r\n\r\n// Import from local ts files.\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\n\r\n// Set default audio.\r\nconst DEFAULTS = Object.freeze({ sound1 : \"media/DifferentHeaven&SianArea-FeelLikeHorrible.mp3\" });\r\n\r\n\r\n// Initialize the program.\r\nconst init = () => {\r\n  audio.setupWebAudio(DEFAULTS.sound1);\r\n\r\n  // Set up <canvas> element.\r\n\tlet canvasElement = document.querySelector(\"canvas\");\r\n\tsetupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n  // Begin the program loop.\r\n  loop();\r\n};\r\n\r\n\r\n// Sets up all UI elements on the page. \r\nconst setupUI = (canvasElement) => {\r\n  // 1.) - Set up full screen button.\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n\t\r\n  // 1A.) - Add onClick event to full screen button.\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n\r\n  // 2.) - Set up play/pause button.\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n\r\n  // 2A.) - Add onClick event to play/pause button.\r\n  playButton.onclick = e => {\r\n    const target = e.target as HTMLButtonElement;\r\n\r\n    // 2B.) - Check if context is in suspended state (autoplay policy).\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n    // 2C.) - If track is currently paused, play it.\r\n    if (target.dataset.playing == \"no\"){\r\n      audio.playCurrentSound();\r\n      target.dataset.playing = \"yes\";\r\n    }\r\n    // 2C.) - If track IS playing, pause it.\r\n    else{\r\n      audio.pauseCurrentSound();\r\n      target.dataset.playing = \"no\";\r\n    }\r\n  };\r\n\r\n\r\n  // 3.) - Set up track <select>.\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n\r\n  // 3A.) - Add onChange event to <select>.\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLSelectElement;\r\n\r\n    audio.loadSoundFile(target.value);\r\n\r\n    // 3B.) - Pause the current track if playing\r\n    if (target.dataset.playing == \"yes\"){\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n\r\n  // 4.) - Set up visual style <select>.\r\n  let visualSelect = document.querySelector(\"#select-visual\") as HTMLSelectElement;\r\n\r\n  // 4A.) - Add onChange event to <select>.\r\n  visualSelect.onchange = e => { \r\n    const target = e.target as HTMLSelectElement;\r\n    canvas.drawParams.visualData = target.value; \r\n  };\r\n\r\n\r\n  // 5.) - Set up canvas toggle checkboxes.\r\n  let bars = document.querySelector(\"#cb-planets\") as HTMLInputElement;\r\n  let circles = document.querySelector(\"#cb-core\") as HTMLInputElement;\r\n  let noise = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n  \r\n  // 5A.) - Add onChange event to canvas sprites.\r\n  bars.onchange = e => { \r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showPlanets = target.checked; \r\n  };\r\n  // 5B.) - Add onChange event to center circle.\r\n  circles.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showCircles = target.checked; \r\n  };\r\n  // 5C.) - Add onChange event to noise.\r\n  noise.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showNoise = target.checked; \r\n  };\r\n\r\n\r\n  // 6.) - Set up visual theme <select>.\r\n  let themeSelect = document.querySelector(\"#select-theme\") as HTMLSelectElement;\r\n\r\n  // 6A.) - Add onChange event to <select>.\r\n  themeSelect.onchange = e => {\r\n    const target = e.target as HTMLSelectElement;\r\n    canvas.changeTheme(target.value);\r\n  }\r\n};\r\n\r\n\r\n// Program loop.\r\nconst loop = () => {\r\n  setTimeout(loop, 1000/60.0);\r\n  canvas.draw();\r\n};\r\n\r\nexport {init};","import * as main from \"./main\";\r\nimport * as audio from \"./audio\";\r\n\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\tconst loadData = () => {\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\r\n\t\txhr.onload = e => {\r\n\t\t\tavDataLoaded(e);\r\n\t\t}\r\n\r\n\t\txhr.open(\"GET\", \"./data/av-data.json\");\r\n\t\txhr.send();\r\n\t};\r\n\r\n\tconst avDataLoaded = (e) => {\r\n\t\tlet json;\r\n\r\n\t\ttry{ json = JSON.parse(e.target.responseText); }\r\n\t\tcatch{ \r\n\t\t\tconsole.log(\"JSON parse error!\"); \r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Load title of application\r\n\t\tdocument.querySelector(\"title\").innerHTML = json.title;\r\n\r\n\t\t// Load track list\r\n\t\tlet trackList = \"\";\r\n\t\tlet tracks = json.tracks;\r\n\r\n\t\tfor(let t of tracks){\r\n\t\t\ttrackList += `<option value=${t[\"track-url\"]}>${t[\"track-name\"]}</option>`;\r\n\t\t}\r\n\r\n\t\tdocument.querySelector(\"#select-track\").innerHTML = trackList;\r\n\r\n\t\t// Load slider controls\r\n\t\tlet controlList = \"| \";\r\n\t\tlet controls = json.controls;\r\n\r\n\t\tfor(let c of controls){\r\n\t\t\tcontrolList += `${c[\"control-name\"]}: <input type=range id=${c[\"control-id\"]} min=${c[\"control-min\"]} max=${c[\"control-max\"]} value=${c[\"control-value\"]} step=0.01>`;\r\n\t\t\tcontrolList += `<span id=${c[\"control-label\"]}>???</span>`;\r\n\t\t\tcontrolList += \" | \";\r\n\t\t}\r\n\r\n\t\tdocument.querySelector(\"#slider-controls\").innerHTML = controlList;\r\n\r\n\t\t// Set up UI for new sliders\r\n\t\tsetupSliderUI();\r\n\r\n\t\t// Load header region of application\r\n\t\tdocument.querySelector(\"header\").innerHTML = `<h1>${json.title}</h1><p>${json.instructions}</p>`;\r\n\t};\r\n\r\n\tconst setupSliderUI = () => {\r\n\t\t// Set up volume slider\r\n\t\tlet volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  \t\tlet volumeLabel = document.querySelector(\"#label-volume\");\r\n\r\n  \t\t// add .oninput event to slider\r\n  \t\tvolumeSlider.oninput = e => {\r\n    \t\tconst target = e.target as HTMLInputElement;\r\n\t\t\t\r\n\t\t\t// set the gain\r\n    \t\taudio.setVolume(target.value);\r\n\r\n    \t\t// update value of label to match the value of slider\r\n    \t\tvolumeLabel.innerHTML = String(Math.round((+target.value/2 * 100)));\r\n\t\t};\r\n\r\n\t\t// Set up treble slider\r\n\t\tlet trebleSlider = document.querySelector(\"#slider-treble\") as HTMLInputElement;\r\n  \t\tlet trebleLabel = document.querySelector(\"#label-treble\");\r\n\r\n  \t\ttrebleSlider.oninput = e => {\r\n\t\t\tconst target = e.target as HTMLInputElement;\r\n\r\n    \t\taudio.setHighshelf(target.value);\r\n\r\n    \t\ttrebleLabel.innerHTML = String(Math.round((+target.value/20 * 100)));\r\n  \t\t};\r\n\r\n\t\t// Set up bass slider\r\n  \t\ttrebleSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n\t\tlet bassSlider = document.querySelector(\"#slider-bass\") as HTMLInputElement;\r\n\t\tlet bassLabel = document.querySelector(\"#label-bass\");\r\n\t\t\r\n\t\tbassSlider.oninput = e => {\r\n\t\t\tconst target = e.target as HTMLInputElement;\r\n\r\n\t\t\taudio.setLowshelf(target.value);\r\n\t\t\t\r\n\t\t\tbassLabel.innerHTML = String(Math.round((+target.value/20 * 100)));\r\n\t\t};\r\n\t\t\r\n\t\tbassSlider.dispatchEvent(new Event(\"input\"));\r\n\t};\r\n\r\n\tloadData();\r\n\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["ctx","canvasWidth","canvasHeight","gradient","analyserNode","audioData","rotation","audioCtx","sourceNode","gainNode","highShelfbiquadFilter","lowShelfBiquadFilter","canvasSprites","drawParams","visualData","showGradient","showPlanets","showCircles","showNoise","Planet","xPos","yPos","radius","barWidth","barMaxHeight","barPadding","fillColor","Object","assign","this","draw","fillStyle","strokeStyle","save","translate","rotate","beginPath","arc","Math","PI","fill","stroke","closePath","restore","xStart","yStart","radialOffset","maxBarHeight","percent","scale","fillRect","drawCircularBars","changeFillColor","value","makeColor","red","green","blue","alpha","getLinearGradient","startX","startY","endX","endY","colorStops","lg","createLinearGradient","addColorStop","color","DEFAULTS","freeze","gain","numSamples","loadSoundFile","Uint8Array","filePath","src","sound1","setupUI","canvasElement","document","querySelector","onclick","e","console","log","requestFullscreen","playButton","target","state","resume","dataset","playing","play","pause","onchange","dispatchEvent","MouseEvent","bars","circles","noise","checked","loop","setTimeout","getByteFrequencyData","getByteTimeDomainData","globalAlpha","maxRadius","i","length","circleRadius","imageData","getImageData","data","width","random","putImageData","window","onload","xhr","setupSliderUI","volumeSlider","volumeLabel","oninput","Number","innerHTML","String","round","trebleSlider","trebleLabel","frequency","setValueAtTime","currentTime","Event","bassSlider","bassLabel","XMLHttpRequest","json","JSON","parse","responseText","title","trackList","tracks","t","controlList","controls","c","instructions","avDataLoaded","open","send","filepath","AudioContext","Audio","createMediaElementSource","createAnalyser","fftSize","createBiquadFilter","type","createGain","connect","destination","analyserNodeRef","getContext","height"],"sourceRoot":""}