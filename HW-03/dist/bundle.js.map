{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://hw-03/./src/utils.ts","webpack://hw-03/./src/audio.ts","webpack://hw-03/./src/classes/planet.ts","webpack://hw-03/./src/canvas.ts","webpack://hw-03/./src/main.ts","webpack://hw-03/./src/loader.ts"],"sourcesContent":["const makeColor = (red, green, blue, alpha = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min, max) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n  \r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor,255-floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n  \r\nconst getLinearGradient = (ctx,startX,startY,endX,endY,colorStops) => {\r\n  let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n  for(let stop of colorStops){\r\n    lg.addColorStop(stop.percent,stop.color);\r\n  }\r\n  return lg;\r\n};\r\n  \r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element:HTMLElement) => { element.requestFullscreen(); };\r\n  \r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen};","// 1.) - Declare WebAudio context.\r\nlet audioCtx;\r\n\r\n// 2.) - WebAudio nodes that make up the WebAudio audio routing graph.\r\nlet element, sourceNode, analyserNode, gainNode;\r\nlet highShelfbiquadFilter, lowShelfBiquadFilter;\r\n\r\n// 3.) - Create default values.\r\nconst DEFAULTS = Object.freeze({\r\n    gain        :   .5,\r\n    numSamples  :   256\r\n});\r\n\r\n// 4.) - Create a new array of 8-bit integers (0-255).\r\n// This is a typed array to hold the audio frequency data.\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples/2);\r\n\r\n// Sets up web audio for the visualizer.\r\nconst setupWebAudio = (filepath) => {\r\n    // 1.) - Initialize WebAudio context.\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2.) - Create an <audio> element.\r\n    element = new Audio();\r\n\r\n    // 3.) - Point the <audio> element at a sound file.\r\n    loadSoundFile(filepath);\r\n\r\n    // 4.) - Create source node that points at the <audio> element.\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5.) - Create analyser node.\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    // 6.) - Apply fft (Fast Fourier Transform) to the analyser node.\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7.) - Create high shelf biquad (treble) filter.\r\n    highShelfbiquadFilter = audioCtx.createBiquadFilter();\r\n    highShelfbiquadFilter.type = \"highshelf\";\r\n    highShelfbiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // 8.) - Create low shelf biquad (bass) filter.\r\n\tlowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilter.type = \"lowshelf\";\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // 9.) - Create gain (volume) node.\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 10.) - Connect the nodes and create the audio graph.\r\n    sourceNode.connect(highShelfbiquadFilter);\r\n    highShelfbiquadFilter.connect(lowShelfBiquadFilter);\r\n    lowShelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n};\r\n\r\n// Load in audio file via the filePath.\r\nconst loadSoundFile = (filePath) => { element.src = filePath; };\r\n\r\n// Play the current audio.\r\nconst playCurrentSound = () => { element.play(); };\r\n\r\n// Pause the current audio.\r\nconst pauseCurrentSound = () => { element.pause(); };\r\n\r\n// Set the volume based on slider input.\r\nconst setVolume = (value) => {\r\n    value = Number(value);\r\n    gainNode.gain.value = value;\r\n};\r\n\r\n// Set the treble based on slider input.\r\nconst setHighshelf = (value) => {\r\n    highShelfbiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    highShelfbiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\n// Set the bass based on slider input.\r\nconst setLowshelf = (value) => {\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    lowShelfBiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nexport {audioCtx, setupWebAudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, setHighshelf, setLowshelf, analyserNode};","import {ctx, rotation, drawCircularBars} from '../canvas';\r\n\r\nexport default class Planet{\r\n\txPos: number;\r\n\tyPos: number;\r\n\tradius: number;\r\n\tbarWidth: number;\r\n\tbarMaxHeight: number;\r\n\tbarPadding: number;\r\n\tfillColor: string;\r\n\r\n\tconstructor({xPos, yPos, radius, barWidth, barMaxHeight, barPadding, fillColor}){\r\n\t\tObject.assign(this, {xPos, yPos, radius, barWidth, barMaxHeight, barPadding, fillColor});\r\n\t}\r\n\r\n\tdraw(){\r\n\t\tctx.fillStyle = this.fillColor;\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.save();\r\n\t\tctx.translate(this.xPos, this.yPos);\r\n\t\tctx.rotate(rotation);\r\n\t\tctx.beginPath();\r\n\t\tctx.arc(0, 0, this.radius, 0, Math.PI * 2);\r\n\t\tctx.fill();\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t\tctx.restore();\r\n\r\n\t\tdrawCircularBars(this.xPos, this.yPos, this.radius, this.barWidth, this.barMaxHeight, this.barPadding, \"white\");\r\n\t}\r\n\r\n\tchangeFillColor(value){\r\n\t\tthis.fillColor = value;\r\n\t}\r\n};","// The purpose of this file is to take in the analyser node and a <canvas> element: \r\n//   - The module will create a drawing context that points at the <canvas> \r\n//   - It will store the reference to the analyser node\r\n//   - In draw(), it will loop through the data in the analyser node\r\n//   - And then draw something representative on the canvas\r\n\r\n// Import from local ts file.\r\nimport * as utils from './utils';\r\nimport Planet from './classes/planet';\r\nimport DrawParams from './interfaces/drawParams.interface';\r\n\r\nlet ctx,canvasWidth,canvasHeight,gradient,analyserNode,audioData;\r\nlet rotation;\r\nlet canvasSprites = []; \r\n\r\n// Declare DrawParams interface to dictate what gets shown or not.\r\nlet drawParams : DrawParams = {visualData: \"frequency\", showGradient: true, showPlanets: true, showCircles: true, showNoise: false};\r\n\r\n\r\n// Set up the canvas for visualization.\r\nconst setupCanvas = (canvasElement,analyserNodeRef) => {\r\n\t// 1.) - Create drawing context.\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\r\n\t// 2.) - Create default gradient that runs top to bottom.\r\n\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#00101c\"},{percent:.33,color:\"#041f3a\"},{percent:.67,color:\"#083f53\"},{percent:1,color:\"#239294\"}]);\r\n\r\n\t// 3.) - Store a reference to the analyser node.\r\n\tanalyserNode = analyserNodeRef;\r\n\r\n\t// 4.) - Set up array where the analyser data will be stored.\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n\r\n\t// 5.) - Set up visualizer sprites and rotation value.\r\n\tcanvasSprites = [new Planet({xPos: 540, yPos: 620, radius: 184, barWidth: 5, barMaxHeight: 100, barPadding: 4, fillColor: \"rgba(14, 111, 128, .9)\"}), \r\n\t\t\t\t\t new Planet({xPos: 880, yPos: 300, radius: 120, barWidth: 2.9, barMaxHeight: 60, barPadding: 3, fillColor: \"rgba(27, 45, 112, .9)\"}), \r\n\t\t\t\t\t new Planet({xPos: 200, yPos: 180, radius: 50, barWidth: 1.4, barMaxHeight: 40, barPadding: 1, fillColor: \"rgba(6, 37, 87, .9)\"})];\r\n\trotation = 0;\r\n}\r\n\r\n\r\n// Draw elements to the canvas.\r\nconst draw = () => {\r\n  \t// 1.) - Populate the audioData array with the frequency (or time domain) data from the analyserNode.\r\n\tif (drawParams.visualData == \"frequency\") analyserNode.getByteFrequencyData(audioData);\r\n\telse if (drawParams.visualData == \"time-domain\") analyserNode.getByteTimeDomainData(audioData);\r\n\t\r\n\t// 2.) - Draw the background.\r\n\tctx.save();\r\n\tctx.fillStyle = \"black\";\r\n\tctx.globalAlpha = .1;\r\n\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\tctx.restore();\r\n\t\t\r\n\t// 3.) - Draw the gradient.\r\n\tif(drawParams.showGradient){\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = gradient;\r\n\t\tctx.globalAlpha = .3;\r\n\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 4.) - Draw center beat circles.\r\n\tif(drawParams.showCircles){\r\n\t\tlet maxRadius = canvasHeight/4;\r\n\t\tctx.save();\r\n\t\tctx.globalAlpha = .5;\r\n\t\tfor (let i = 0; i<audioData.length; i++) {\r\n\t\t\tlet percent = audioData[i] / 255;\r\n\r\n\t\t\tlet circleRadius = percent * maxRadius;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(210, 210, 210, .34 - percent/3.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(180, 180, 180, .1 - percent/10.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.save();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(240, 240, 240, .5 - percent/5.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * .5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 5.) - Draw visual noise via bitmap manipulation.\r\n\t// 5A.) - Grab all of the pixels on the canvas and put them in the `data` array.\r\n\tlet imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n\tlet data = imageData.data;\r\n\tlet length = data.length;\r\n\tlet width = imageData.width;\r\n\r\n\t// 5B.) - Iterate through each pixel, stepping 4 elements at a time.\r\n\tfor (let i = 0; i < length; i += 4){ \r\n\r\n\t\t// 5C.) - Randomly change every 20th pixel to white.\r\n\t\tif (drawParams.showNoise && Math.random() < .05){\t\t\r\n\t\t\tdata[i] = data[i+1] = data[i+2] = 0;\r\n\t\t\tdata[i] = 255;\r\n\t\t\tdata[i+1] = 255;\r\n\t\t\tdata[i+2] = 255;\r\n\t\t}\r\n\t}\r\n\r\n\t// 5D.) - Copy image data back to canvas.\r\n\tctx.putImageData(imageData, 0, 0);\r\n\r\n\t// 6.) - Draw the sprites and alter rotation value.\r\n\tif (drawParams.showPlanets) for (let s of canvasSprites) s.draw();\r\n\trotation -= 0.01;\r\n}\r\n\r\n\r\n// Draws beat bars that encircle and rotate for the sprites.\r\nconst drawCircularBars = (xStart, yStart, radialOffset, barWidth, maxBarHeight, barPadding, fillColor) => {\r\n\tctx.fillStyle = fillColor;\r\n\tctx.strokeStyle = \"black\";\r\n\tctx.save();\r\n\t\r\n\tctx.translate(xStart, yStart);\r\n\tctx.rotate(rotation);\r\n\tctx.translate(0, -radialOffset)\r\n\r\n\tfor (let d of audioData){\r\n\t\tlet percent = d/255;\r\n\t\tif (percent < 0.02) percent = .02;\r\n\r\n\t\tctx.translate(barWidth, 0);\r\n\t\tctx.rotate((Math.PI * 2) / 128);\r\n\t\t\r\n\t\tctx.save();\r\n\t\tctx.scale(1, -1);\r\n\t\tctx.fillRect(0, 0, barWidth, maxBarHeight * percent);\r\n\t\tctx.restore();\r\n\r\n\t\tctx.translate(barPadding, 0);\r\n\t}\r\n\r\n\tctx.restore();\r\n};\r\n\r\n\r\n// Changes the visual theme (gradient and sprites).\r\nconst changeTheme = (value) => {\r\n\tif (value != \"none\") drawParams.showGradient = true;\r\n\t\r\n\t// Set to evening theme colors.\r\n\tif (value == \"evening\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#00101c\"},{percent:.33,color:\"#041f3a\"},{percent:.67,color:\"#083f53\"},{percent:1,color:\"#239294\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(14, 111, 128, .9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(27, 45, 112, .9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(6, 37, 87, .9)\");\r\n\t}\r\n\t\r\n\t// Set to midnight theme colors.\r\n\telse if (value == \"midnight\"){\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#070707\"},{percent:.5,color:\"#1D1D25\"},{percent:1,color:\"#263242\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(48, 68, 92, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(42, 42, 56, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(35, 35, 43, 0.9)\");\r\n\t} \r\n\r\n\t// Set to morning theme colors.\r\n\telse if (value == \"morning\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#0087A5\"},{percent:.33,color:\"#7FACB2\"},{percent:.67,color:\"#D4C6AB\"},{percent:1,color:\"#FAAD51\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(245, 186, 118, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(165, 204, 207, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(15, 141, 166, 0.9)\");\r\n\t}\r\n\r\n\t// Set to afternoon theme colors.\r\n\telse if (value == \"afternoon\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#3B589E\"},{percent:.33,color:\"#6A719F\"},{percent:.67,color:\"#B28393\"},{percent:1,color:\"#EC5065\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(245, 144, 145, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(172, 156, 184, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(95, 122, 194, 0.9)\");\r\n\t}\r\n\r\n\t// Deactivate gradient and set sprites to white.\r\n\telse if (value == \"none\") {\r\n\t\tdrawParams.showGradient = false;\r\n\t\tcanvasSprites[0].changeFillColor(\"white\");\r\n\t\tcanvasSprites[1].changeFillColor(\"white\");\r\n\t\tcanvasSprites[2].changeFillColor(\"white\");\r\n\t}\t\r\n}\r\n\r\nexport {setupCanvas,draw,changeTheme,drawParams,ctx,rotation,drawCircularBars};","// main.ts - Primarily responsible for hooking up the UI to the rest of the application \r\n// and setting up the main event loop\r\n\r\n// Import from local ts files.\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\n\r\n// Set default audio.\r\nconst DEFAULTS = Object.freeze({ sound1 : \"media/DifferentHeaven&SianArea-FeelLikeHorrible.mp3\" });\r\n\r\n\r\n// Initialize the program.\r\nconst init = () => {\r\n  audio.setupWebAudio(DEFAULTS.sound1);\r\n\r\n  // Set up <canvas> element.\r\n\tlet canvasElement = document.querySelector(\"canvas\");\r\n\tsetupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n  // Begin the program loop.\r\n  loop();\r\n};\r\n\r\n\r\n// Sets up all UI elements on the page. \r\nconst setupUI = (canvasElement) => {\r\n  // 1.) - Set up full screen button.\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n\t\r\n  // 1A.) - Add onClick event to full screen button.\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n\r\n  // 2.) - Set up play/pause button.\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n\r\n  // 2A.) - Add onClick event to play/pause button.\r\n  playButton.onclick = e => {\r\n    const target = e.target as HTMLButtonElement;\r\n\r\n    // 2B.) - Check if context is in suspended state (autoplay policy).\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n    // 2C.) - If track is currently paused, play it.\r\n    if (target.dataset.playing == \"no\"){\r\n      audio.playCurrentSound();\r\n      target.dataset.playing = \"yes\";\r\n    }\r\n    // 2C.) - If track IS playing, pause it.\r\n    else{\r\n      audio.pauseCurrentSound();\r\n      target.dataset.playing = \"no\";\r\n    }\r\n  };\r\n\r\n\r\n  // 3.) - Set up track <select>.\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n\r\n  // 3A.) - Add onChange event to <select>.\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLSelectElement;\r\n\r\n    audio.loadSoundFile(target.value);\r\n\r\n    // 3B.) - Pause the current track if playing\r\n    if (target.dataset.playing == \"yes\"){\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n\r\n  // 4.) - Set up visual style <select>.\r\n  let visualSelect = document.querySelector(\"#select-visual\") as HTMLSelectElement;\r\n\r\n  // 4A.) - Add onChange event to <select>.\r\n  visualSelect.onchange = e => { \r\n    const target = e.target as HTMLSelectElement;\r\n    canvas.drawParams.visualData = target.value; \r\n  };\r\n\r\n\r\n  // 5.) - Set up canvas toggle checkboxes.\r\n  let bars = document.querySelector(\"#cb-planets\") as HTMLInputElement;\r\n  let circles = document.querySelector(\"#cb-core\") as HTMLInputElement;\r\n  let noise = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n  \r\n  // 5A.) - Add onChange event to canvas sprites.\r\n  bars.onchange = e => { \r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showPlanets = target.checked; \r\n  };\r\n  // 5B.) - Add onChange event to center circle.\r\n  circles.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showCircles = target.checked; \r\n  };\r\n  // 5C.) - Add onChange event to noise.\r\n  noise.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showNoise = target.checked; \r\n  };\r\n\r\n\r\n  // 6.) - Set up visual theme <select>.\r\n  let themeSelect = document.querySelector(\"#select-theme\") as HTMLSelectElement;\r\n\r\n  // 6A.) - Add onChange event to <select>.\r\n  themeSelect.onchange = e => {\r\n    const target = e.target as HTMLSelectElement;\r\n    canvas.changeTheme(target.value);\r\n  }\r\n};\r\n\r\n\r\n// Program loop.\r\nconst loop = () => {\r\n  setTimeout(loop, 1000/60.0);\r\n  canvas.draw();\r\n};\r\n\r\nexport {init};","// Import from local ts files.\r\nimport * as main from \"./main\";\r\nimport * as audio from \"./audio\";\r\n\r\n// Upon load, read in JSON data and construct page.\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\r\n\t// 1.) - Create XHR request and load data from JSON.\r\n\tconst loadData = () => {\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\r\n\t\txhr.onload = e => {\r\n\t\t\tavDataLoaded(e);\r\n\t\t}\r\n\r\n\t\txhr.open(\"GET\", \"./data/av-data.json\");\r\n\t\txhr.send();\r\n\t};\r\n\r\n\t// 2.) - Parse JSON file and set up HTML via its contents.\r\n\tconst avDataLoaded = (e) => {\r\n\t\tlet json;\r\n\r\n\t\t// 2A.) - Try/catch for parsing JSON file.\r\n\t\ttry{ json = JSON.parse(e.target.responseText); }\r\n\t\tcatch{ \r\n\t\t\tconsole.log(\"JSON parse error!\"); \r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 2B.) - Load title of application.\r\n\t\tdocument.querySelector(\"title\").innerHTML = json.title;\r\n\r\n\t\t// 2C.) - Load track list.\r\n\t\tlet trackList = \"\";\r\n\t\tlet tracks = json.tracks;\r\n\r\n\t\tfor(let t of tracks){ trackList += `<option value=${t[\"track-url\"]}>${t[\"track-name\"]}</option>`; }\r\n\r\n\t\tdocument.querySelector(\"#select-track\").innerHTML = trackList;\r\n\r\n\t\t// 2D.) - Load slider controls.\r\n\t\tlet controlList = \"| \";\r\n\t\tlet controls = json.controls;\r\n\r\n\t\tfor(let c of controls){\r\n\t\t\tcontrolList += `${c[\"control-name\"]}: <input type=range id=${c[\"control-id\"]} min=${c[\"control-min\"]} max=${c[\"control-max\"]} value=${c[\"control-value\"]} step=0.01>`;\r\n\t\t\tcontrolList += `<span id=${c[\"control-label\"]}>???</span>`;\r\n\t\t\tcontrolList += \" | \";\r\n\t\t}\r\n\r\n\t\tdocument.querySelector(\"#slider-controls\").innerHTML = controlList;\r\n\r\n\t\t// 2E.) - Set up UI for new sliders.\r\n\t\tsetupSliderUI();\r\n\r\n\t\t// 2F.) - Load header region of application.\r\n\t\tdocument.querySelector(\"header\").innerHTML = `<h1>${json.title}</h1><p>${json.instructions}</p>`;\r\n\t};\r\n\r\n\t// 3.) - Set up the slider UI on the page.\r\n\tconst setupSliderUI = () => {\r\n\t\t// 4.) - Set up volume slider.\r\n\t\tlet volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  \t\tlet volumeLabel = document.querySelector(\"#label-volume\");\r\n\r\n  \t\t// 4A.) - Add onInput event to slider.\r\n  \t\tvolumeSlider.oninput = e => {\r\n    \t\tconst target = e.target as HTMLInputElement;\r\n\t\t\t\r\n\t\t\t// 4B.) - Set the gain.\r\n    \t\taudio.setVolume(target.value);\r\n\r\n    \t\t// 4C.) - Update value of label to match the value of slider.\r\n    \t\tvolumeLabel.innerHTML = String(Math.round((+target.value/2 * 100)));\r\n\t\t};\r\n\r\n\t\tvolumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n\t\t// 5.) - Set up treble slider.\r\n\t\tlet trebleSlider = document.querySelector(\"#slider-treble\") as HTMLInputElement;\r\n  \t\tlet trebleLabel = document.querySelector(\"#label-treble\");\r\n\r\n\t\t// 5A.) - Add onInput event to slider.\r\n  \t\ttrebleSlider.oninput = e => {\r\n\t\t\tconst target = e.target as HTMLInputElement;\r\n\r\n\t\t\t// 5B.) - Set the treble.\r\n    \t\taudio.setHighshelf(target.value);\r\n\r\n\t\t\t// 5C.) - Update value of label to match the value of slider.\r\n    \t\ttrebleLabel.innerHTML = String(Math.round((+target.value/20 * 100)));\r\n  \t\t};\r\n\r\n  \t\ttrebleSlider.dispatchEvent(new Event(\"input\"));\r\n\t\t\r\n\t\t// 6.) - Set up bass slider.\r\n\t\tlet bassSlider = document.querySelector(\"#slider-bass\") as HTMLInputElement;\r\n\t\tlet bassLabel = document.querySelector(\"#label-bass\");\r\n\t\t\r\n\t\t// 6A.) - Add onInput event to slider.\r\n\t\tbassSlider.oninput = e => {\r\n\t\t\tconst target = e.target as HTMLInputElement;\r\n\r\n\t\t\t// 6B.) - Set the bass.\r\n\t\t\taudio.setLowshelf(target.value);\r\n\t\t\t\r\n\t\t\t// 6C.) - Update value of label to match the value of slider.\r\n\t\t\tbassLabel.innerHTML = String(Math.round((+target.value/20 * 100)));\r\n\t\t};\r\n\t\t\r\n\t\tbassSlider.dispatchEvent(new Event(\"input\"));\r\n\t};\r\n\r\n\t// Call loadData.\r\n\tloadData();\r\n\r\n\t// Start up app.\r\n\tmain.init();\r\n};"],"names":["audioCtx","sourceNode","analyserNode","gainNode","highShelfbiquadFilter","lowShelfBiquadFilter","makeColor","red","green","blue","alpha","getLinearGradient","ctx","startX","startY","endX","endY","colorStops","lg","createLinearGradient","addColorStop","percent","color","DEFAULTS","Object","freeze","gain","numSamples","loadSoundFile","Uint8Array","filePath","src","xPos","yPos","radius","barWidth","barMaxHeight","barPadding","fillColor","assign","this","draw","fillStyle","strokeStyle","save","translate","rotate","rotation","beginPath","arc","Math","PI","fill","stroke","closePath","restore","drawCircularBars","changeFillColor","value","canvasWidth","canvasHeight","gradient","canvasSprites","drawParams","visualData","showGradient","showPlanets","showCircles","showNoise","xStart","yStart","radialOffset","maxBarHeight","scale","fillRect","sound1","setupUI","canvasElement","document","querySelector","onclick","e","console","log","requestFullscreen","playButton","target","state","resume","dataset","playing","play","pause","onchange","dispatchEvent","MouseEvent","bars","circles","noise","checked","loop","setTimeout","getByteFrequencyData","getByteTimeDomainData","globalAlpha","maxRadius","i","length","circleRadius","imageData","getImageData","data","width","random","putImageData","window","onload","xhr","setupSliderUI","volumeSlider","volumeLabel","oninput","Number","innerHTML","String","round","Event","trebleSlider","trebleLabel","frequency","setValueAtTime","currentTime","bassSlider","bassLabel","XMLHttpRequest","json","JSON","parse","responseText","title","trackList","tracks","t","controlList","controls","c","instructions","avDataLoaded","open","send","filepath","AudioContext","Audio","createMediaElementSource","createAnalyser","fftSize","createBiquadFilter","type","createGain","connect","destination","analyserNodeRef","getContext","height"],"sourceRoot":""}