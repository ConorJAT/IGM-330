{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://hw-03/./src/utils.ts","webpack://hw-03/./src/audio.ts","webpack://hw-03/./src/canvas.ts","webpack://hw-03/./src/main.ts","webpack://hw-03/./src/loader.ts"],"sourcesContent":["const makeColor = (red, green, blue, alpha = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min, max) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n  \r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor,255-floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n  \r\nconst getLinearGradient = (ctx,startX,startY,endX,endY,colorStops) => {\r\n  let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n  for(let stop of colorStops){\r\n    lg.addColorStop(stop.percent,stop.color);\r\n  }\r\n  return lg;\r\n};\r\n  \r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element:HTMLElement) => { element.requestFullscreen(); };\r\n  \r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen};","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element, sourceNode, analyserNode, gainNode;\r\nlet highShelfbiquadFilter, lowShelfBiquadFilter;\r\n\r\n// 3 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    gain        :   .5,\r\n    numSamples  :   256\r\n});\r\n\r\n// 4 - create a new array of 8-bit integers (0-255)\r\n// this is a typed array to hold the audio frequency data\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples/2);\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebAudio = (filepath) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();  // document.querySelector(\"audio\");\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filepath);\r\n\r\n    // 4 - create a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser();  // Note the UK spelling of \"Analyser\"\r\n\r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n\r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */ \r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 6.5 - create bass and treble nodes\r\n    highShelfbiquadFilter = audioCtx.createBiquadFilter();\r\n    highShelfbiquadFilter.type = \"highshelf\";\r\n    highShelfbiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n\tlowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilter.type = \"lowshelf\";\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(highShelfbiquadFilter);\r\n    highShelfbiquadFilter.connect(lowShelfBiquadFilter);\r\n    lowShelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n};\r\n\r\nconst loadSoundFile = (filePath) => {\r\n    element.src = filePath;\r\n};\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n};\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n};\r\n\r\nconst setVolume = (value) => {\r\n    value = Number(value);  // Make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n};\r\n\r\nconst setHighshelf = (value) => {\r\n    highShelfbiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    highShelfbiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nconst setLowshelf = (value) => {\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    lowShelfBiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nexport {audioCtx, setupWebAudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, setHighshelf, setLowshelf, analyserNode};","/*\r\n\tThe purpose of this file is to take in the analyser node and a <canvas> element: \r\n\t  - the module will create a drawing context that points at the <canvas> \r\n\t  - it will store the reference to the analyser node\r\n\t  - in draw(), it will loop through the data in the analyser node\r\n\t  - and then draw something representative on the canvas\r\n\t  - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\n\r\nlet ctx,canvasWidth,canvasHeight,gradient,analyserNode,audioData;\r\nlet rotation;\r\nlet canvasSprites = []; \r\n\r\ninterface DrawParams{\r\n\tvisualData    : string,\r\n\tshowGradient  : boolean,\r\n\tshowPlanets   : boolean,\r\n\tshowCircles   : boolean,\r\n\tshowNoise     : boolean\r\n  }\r\n  \r\nlet drawParams : DrawParams = {visualData: \"frequency\", showGradient: true, showPlanets: true, showCircles: true, showNoise: false};\r\n\r\nconst Planet = class{\r\n\txPos: number;\r\n\tyPos: number;\r\n\tradius: number;\r\n\tbarWidth: number;\r\n\tbarMaxHeight: number;\r\n\tbarPadding: number;\r\n\tfillColor: string;\r\n\r\n\tconstructor({xPos, yPos, radius, barWidth, barMaxHeight, barPadding, fillColor}){\r\n\t\tObject.assign(this, {xPos, yPos, radius, barWidth, barMaxHeight, barPadding, fillColor});\r\n\t}\r\n\r\n\tdraw(){\r\n\t\tctx.fillStyle = this.fillColor;\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.save();\r\n\t\tctx.translate(this.xPos, this.yPos);\r\n\t\tctx.rotate(rotation);\r\n\t\tctx.beginPath();\r\n\t\tctx.arc(0, 0, this.radius, 0, Math.PI * 2);\r\n\t\tctx.fill();\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t\tctx.restore();\r\n\r\n\t\tdrawCircularBars(this.xPos, this.yPos, this.radius, this.barWidth, this.barMaxHeight, this.barPadding, \"white\");\r\n\t}\r\n\r\n\tchangeFillColor(value){\r\n\t\tthis.fillColor = value;\r\n\t}\r\n};\r\n\r\nconst setupCanvas = (canvasElement,analyserNodeRef) => {\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\t// create a gradient that runs top to bottom\r\n\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#00101c\"},{percent:.33,color:\"#041f3a\"},{percent:.67,color:\"#083f53\"},{percent:1,color:\"#239294\"}]);\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n\r\n\r\n\tcanvasSprites = [new Planet({xPos: 540, yPos: 620, radius: 184, barWidth: 5, barMaxHeight: 100, barPadding: 4, fillColor: \"rgba(14, 111, 128, .9)\"}), \r\n\t\t\t\t\t new Planet({xPos: 880, yPos: 300, radius: 120, barWidth: 2.9, barMaxHeight: 60, barPadding: 3, fillColor: \"rgba(27, 45, 112, .9)\"}), \r\n\t\t\t\t\t new Planet({xPos: 200, yPos: 180, radius: 50, barWidth: 1.4, barMaxHeight: 40, barPadding: 1, fillColor: \"rgba(6, 37, 87, .9)\"})];\r\n\trotation = 0;\r\n}\r\n\r\nconst draw = () => {\r\n  \t// 1 - populate the audioData array with the frequency data from the analyserNode\r\n\tif (drawParams.visualData == \"frequency\") analyserNode.getByteFrequencyData(audioData);\r\n\telse if (drawParams.visualData == \"time-domain\") analyserNode.getByteTimeDomainData(audioData);\r\n\t\r\n\t// 2 - draw background\r\n\tctx.save();\r\n\tctx.fillStyle = \"black\";\r\n\tctx.globalAlpha = .1;\r\n\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\tctx.restore();\r\n\t\t\r\n\t// 3 - draw gradient\r\n\tif(drawParams.showGradient){\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = gradient;\r\n\t\tctx.globalAlpha = .3;\r\n\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 4 - draw bars\r\n\t// if(params.showBars){\r\n\t// }\r\n\r\n\t// 5 - draw circles\r\n\tif(drawParams.showCircles){\r\n\t\tlet maxRadius = canvasHeight/4;\r\n\t\tctx.save();\r\n\t\tctx.globalAlpha = .5;\r\n\t\tfor (let i = 0; i<audioData.length; i++) {\r\n\t\t\t// red-ish circles\r\n\t\t\tlet percent = audioData[i] / 255;\r\n\r\n\t\t\tlet circleRadius = percent * maxRadius;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(210, 210, 210, .34 - percent/3.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(180, 180, 180, .1 - percent/10.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.save();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(240, 240, 240, .5 - percent/5.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * .5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 6 - bitmap manipulation\r\n\t// A) grab all of the pixels on the canvas and put them in the `data` array\r\n\t// `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n\t// the variable `data` below is a reference to that array \r\n\tlet imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n\tlet data = imageData.data;\r\n\tlet length = data.length;\r\n\tlet width = imageData.width;\r\n\r\n\t// B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n\tfor (let i = 0; i < length; i += 4){ \r\n\r\n\t\t// C) randomly change every 20th pixel to red\r\n\t\tif (drawParams.showNoise && Math.random() < .05){\t\t\r\n\t\t\t// data[i] is the red channel\r\n\t\t\t// data[i+1] is the green channel\r\n\t\t\t// data[i+2] is the blue channel\r\n\t\t\t// data[i+3] is the alpha channel\r\n\t\t\tdata[i] = data[i+1] = data[i+2] = 0; // zero out the red and green and blue channels\r\n\t\t\tdata[i] = 255;\r\n\t\t\tdata[i+1] = 255;\r\n\t\t\tdata[i+2] = 255;\r\n\t\t} // end if\r\n\t} // end for\r\n\r\n\t// D) copy image data back to canvas\r\n\tctx.putImageData(imageData, 0, 0);\r\n\r\n\tif (drawParams.showPlanets) for (let s of canvasSprites) s.draw();\r\n\trotation -= 0.01;\r\n}\r\n\r\nconst drawCircularBars = (xStart, yStart, radialOffset, barWidth, maxBarHeight, barPadding, fillColor) => {\r\n\tctx.fillStyle = fillColor;\r\n\tctx.strokeStyle = \"black\";\r\n\tctx.save();\r\n\t\r\n\tctx.translate(xStart, yStart);\r\n\tctx.rotate(rotation);\r\n\tctx.translate(0, -radialOffset)\r\n\r\n\tfor (let d of audioData){\r\n\t\tlet percent = d/255;\r\n\t\tif (percent < 0.02) percent = .02;\r\n\r\n\t\tctx.translate(barWidth, 0);\r\n\t\tctx.rotate((Math.PI * 2) / 128);\r\n\t\t\r\n\t\tctx.save();\r\n\t\tctx.scale(1, -1);\r\n\t\tctx.fillRect(0, 0, barWidth, maxBarHeight * percent);\r\n\t\tctx.restore();\r\n\r\n\t\tctx.translate(barPadding, 0);\r\n\t}\r\n\r\n\tctx.restore();\r\n};\r\n\r\nconst changeTheme = (value) => {\r\n\tif (value != \"none\") drawParams.showGradient = true;\r\n\t\r\n\tif (value == \"evening\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#00101c\"},{percent:.33,color:\"#041f3a\"},{percent:.67,color:\"#083f53\"},{percent:1,color:\"#239294\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(14, 111, 128, .9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(27, 45, 112, .9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(6, 37, 87, .9)\");\r\n\t}\r\n\t\r\n\telse if (value == \"midnight\"){\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#070707\"},{percent:.5,color:\"#1D1D25\"},{percent:1,color:\"#263242\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(48, 68, 92, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(42, 42, 56, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(35, 35, 43, 0.9)\");\r\n\t} \r\n\telse if (value == \"morning\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#0087A5\"},{percent:.33,color:\"#7FACB2\"},{percent:.67,color:\"#D4C6AB\"},{percent:1,color:\"#FAAD51\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(245, 186, 118, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(165, 204, 207, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(15, 141, 166, 0.9)\");\r\n\t}\r\n\r\n\telse if (value == \"afternoon\") {\r\n\t\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"#3B589E\"},{percent:.33,color:\"#6A719F\"},{percent:.67,color:\"#B28393\"},{percent:1,color:\"#EC5065\"}]);\r\n\t\tcanvasSprites[0].changeFillColor(\"rgba(245, 144, 145, 0.9)\");\r\n\t\tcanvasSprites[1].changeFillColor(\"rgba(172, 156, 184, 0.9)\");\r\n\t\tcanvasSprites[2].changeFillColor(\"rgba(95, 122, 194, 0.9)\");\r\n\t}\r\n\telse if (value == \"none\") {\r\n\t\tdrawParams.showGradient = false;\r\n\t\tcanvasSprites[0].changeFillColor(\"white\");\r\n\t\tcanvasSprites[1].changeFillColor(\"white\");\r\n\t\tcanvasSprites[2].changeFillColor(\"white\");\r\n\t}\t\r\n}\r\nexport {setupCanvas,draw,changeTheme,drawParams};","/*\r\n\tmain.js is primarily responsible for hooking up the UI to the rest of the application \r\n\tand setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\n\r\n// 1 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n\tsound1  :  \"media/DifferentHeaven&SianArea-FeelLikeHorrible.mp3\"\r\n});\r\n\r\n\r\nconst init = () => {\r\n\tconsole.log(\"init called\");\r\n  \r\n  audio.setupWebAudio(DEFAULTS.sound1);\r\n\tlet canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n\tsetupUI(canvasElement);\r\n\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n  loop();\r\n};\r\n\r\n\r\nconst setupUI = (canvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n\t\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n\r\n  // B - add .onclick event to \"Play/Pause\" button\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n\r\n  playButton.onclick = e => {\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    const target = e.target as HTMLButtonElement;\r\n\r\n    // check if context is in suspended state (autoplay policy)\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    if (target.dataset.playing == \"no\"){\r\n      // if track is currently paused, play it\r\n      audio.playCurrentSound();\r\n      target.dataset.playing = \"yes\";  // CSS will set the text to \"Pause\"\r\n    }\r\n    else{\r\n      // if track IS playing, pause it\r\n      audio.pauseCurrentSound();\r\n      target.dataset.playing = \"no\";  // CSS will set the text to \"Play\"\r\n    }\r\n  };\r\n\r\n\r\n  // C - hookup track <select>\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n\r\n  // add .onchange event to <select>\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLSelectElement;\r\n\r\n    audio.loadSoundFile(target.value);\r\n\r\n    // pause the current track if playing\r\n    if (target.dataset.playing == \"yes\"){\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  let visualSelect = document.querySelector(\"#select-visual\") as HTMLSelectElement;\r\n\r\n  visualSelect.onchange = e => { \r\n    const target = e.target as HTMLSelectElement;\r\n    canvas.drawParams.visualData = target.value; \r\n  };\r\n\r\n\r\n  // D - hookup canvas toggles\r\n  let bars = document.querySelector(\"#cb-planets\") as HTMLInputElement;\r\n  let circles = document.querySelector(\"#cb-core\") as HTMLInputElement;\r\n  let noise = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n  \r\n  bars.onchange = e => { \r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showPlanets = target.checked; \r\n  };\r\n\r\n  circles.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showCircles = target.checked; \r\n  };\r\n\r\n  noise.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    canvas.drawParams.showNoise = target.checked; \r\n  };\r\n\r\n\r\n  let themeSelect = document.querySelector(\"#select-theme\") as HTMLSelectElement;\r\n\r\n  themeSelect.onchange = e => {\r\n    const target = e.target as HTMLSelectElement;\r\n    canvas.changeTheme(target.value);\r\n  }\r\n}; // end setupUI\r\n\r\n\r\nconst loop = () => {\r\n  setTimeout(loop, 1000/60.0);\r\n  canvas.draw();\r\n};\r\n\r\nexport {init};","import * as main from \"./main\";\r\nimport * as audio from \"./audio\";\r\n\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\tconst loadData = () => {\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\r\n\t\txhr.onload = e => {\r\n\t\t\tavDataLoaded(e);\r\n\t\t}\r\n\r\n\t\txhr.open(\"GET\", \"./data/av-data.json\");\r\n\t\txhr.send();\r\n\t};\r\n\r\n\tconst avDataLoaded = (e) => {\r\n\t\tlet json;\r\n\r\n\t\ttry{ json = JSON.parse(e.target.responseText); }\r\n\t\tcatch{ \r\n\t\t\tconsole.log(\"JSON parse error!\"); \r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Load title of application\r\n\t\tdocument.querySelector(\"title\").innerHTML = json.title;\r\n\r\n\t\t// Load track list\r\n\t\tlet trackList = \"\";\r\n\t\tlet tracks = json.tracks;\r\n\r\n\t\tfor(let t of tracks){\r\n\t\t\ttrackList += `<option value=${t[\"track-url\"]}>${t[\"track-name\"]}</option>`;\r\n\t\t}\r\n\r\n\t\tdocument.querySelector(\"#select-track\").innerHTML = trackList;\r\n\r\n\t\t// Load slider controls\r\n\t\tlet controlList = \"| \";\r\n\t\tlet controls = json.controls;\r\n\r\n\t\tfor(let c of controls){\r\n\t\t\tcontrolList += `${c[\"control-name\"]}: <input type=range id=${c[\"control-id\"]} min=${c[\"control-min\"]} max=${c[\"control-max\"]} value=${c[\"control-value\"]} step=0.01>`;\r\n\t\t\tcontrolList += `<span id=${c[\"control-label\"]}>???</span>`;\r\n\t\t\tcontrolList += \" | \";\r\n\t\t}\r\n\r\n\t\tdocument.querySelector(\"#slider-controls\").innerHTML = controlList;\r\n\r\n\t\t// Set up UI for new sliders\r\n\t\tsetupSliderUI();\r\n\r\n\t\t// Load header region of application\r\n\t\tdocument.querySelector(\"header\").innerHTML = `<h1>${json.title}</h1><p>${json.instructions}</p>`;\r\n\t};\r\n\r\n\tconst setupSliderUI = () => {\r\n\t\t// Set up volume slider\r\n\t\tlet volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  \t\tlet volumeLabel = document.querySelector(\"#label-volume\");\r\n\r\n  \t\t// add .oninput event to slider\r\n  \t\tvolumeSlider.oninput = e => {\r\n    \t\tconst target = e.target as HTMLInputElement;\r\n\t\t\t\r\n\t\t\t// set the gain\r\n    \t\taudio.setVolume(target.value);\r\n\r\n    \t\t// update value of label to match the value of slider\r\n    \t\tvolumeLabel.innerHTML = String(Math.round((+target.value/2 * 100)));\r\n\t\t};\r\n\r\n\t\t// Set up treble slider\r\n\t\tlet trebleSlider = document.querySelector(\"#slider-treble\") as HTMLInputElement;\r\n  \t\tlet trebleLabel = document.querySelector(\"#label-treble\");\r\n\r\n  \t\ttrebleSlider.oninput = e => {\r\n\t\t\tconst target = e.target as HTMLInputElement;\r\n\r\n    \t\taudio.setHighshelf(target.value);\r\n\r\n    \t\ttrebleLabel.innerHTML = String(Math.round((+target.value/20 * 100)));\r\n  \t\t};\r\n\r\n\t\t// Set up bass slider\r\n  \t\ttrebleSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n\t\tlet bassSlider = document.querySelector(\"#slider-bass\") as HTMLInputElement;\r\n\t\tlet bassLabel = document.querySelector(\"#label-bass\");\r\n\t\t\r\n\t\tbassSlider.oninput = e => {\r\n\t\t\tconst target = e.target as HTMLInputElement;\r\n\r\n\t\t\taudio.setLowshelf(target.value);\r\n\t\t\t\r\n\t\t\tbassLabel.innerHTML = String(Math.round((+target.value/20 * 100)));\r\n\t\t};\r\n\t\t\r\n\t\tbassSlider.dispatchEvent(new Event(\"input\"));\r\n\t};\r\n\r\n\tloadData();\r\n\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["audioCtx","sourceNode","analyserNode","gainNode","highShelfbiquadFilter","lowShelfBiquadFilter","ctx","canvasWidth","canvasHeight","gradient","rotation","makeColor","red","green","blue","alpha","getLinearGradient","startX","startY","endX","endY","colorStops","lg","createLinearGradient","addColorStop","percent","color","DEFAULTS","Object","freeze","gain","numSamples","loadSoundFile","Uint8Array","filePath","src","canvasSprites","drawParams","visualData","showGradient","showPlanets","showCircles","showNoise","Planet","xPos","yPos","radius","barWidth","barMaxHeight","barPadding","fillColor","assign","this","draw","fillStyle","strokeStyle","save","translate","rotate","beginPath","arc","Math","PI","fill","stroke","closePath","restore","drawCircularBars","changeFillColor","value","xStart","yStart","radialOffset","maxBarHeight","scale","fillRect","sound1","setupUI","canvasElement","document","querySelector","onclick","e","console","log","requestFullscreen","playButton","state","target","resume","dataset","playing","play","pause","onchange","dispatchEvent","MouseEvent","bars","circles","noise","checked","loop","setTimeout","getByteFrequencyData","getByteTimeDomainData","globalAlpha","maxRadius","i","length","circleRadius","imageData","getImageData","data","width","random","putImageData","window","onload","xhr","setupSliderUI","volumeSlider","volumeLabel","oninput","Number","innerHTML","String","round","trebleSlider","trebleLabel","frequency","setValueAtTime","currentTime","Event","bassSlider","bassLabel","XMLHttpRequest","json","JSON","parse","responseText","title","trackList","tracks","t","controlList","controls","c","instructions","avDataLoaded","open","send","filepath","AudioContext","Audio","createMediaElementSource","createAnalyser","fftSize","createBiquadFilter","type","createGain","connect","destination","analyserNodeRef","getContext","height"],"sourceRoot":""}